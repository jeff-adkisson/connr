@using Connr.Process
@using Processes = DotNetstat.Processes
<EditForm Model="Model" OnValidSubmit="Start">
    <DataAnnotationsValidator/>
    <MudCard>
        <MudCardContent>
            @if (CurrentProcess.State.CanStart())
            {
                <MudTextField
                    Label="Command"
                    @bind-Value="Model.Command"
                    For="() => Model.Command"
                    Variant="Variant.Outlined"
                    Class="mb-2"/>
                <MudTextField
                    Label="Arguments"
                    @bind-Value="Model.Arguments"
                    For="() => Model.Arguments"
                    Variant="Variant.Outlined"
                    Class="mb-2"/>
                <MudTextField
                    Label="Working Directory"
                    @bind-Value="Model.WorkingDirectory"
                    For="() => Model.WorkingDirectory"
                    Variant="Variant.Outlined"
                    Class="mb-2"/>
                <MudTextField
                    Label="Name"
                    @bind-Value="Model.Name"
                    For="() => Model.Name"
                    Variant="Variant.Outlined"
                    Class="mb-2"/>
            }
            else
            {
                <MudText Typo="Typo.h5">
                    @(string.IsNullOrWhiteSpace(Model.Name) ? Model.Command : Model.Name)
                </MudText>
            }
        </MudCardContent>
        
        <MudCardActions>
            @if (CurrentProcess.State.CanStart())
            {
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Success">
                    Start
                </MudButton>
            }

            @if (CurrentProcess.State.CanStop())
            {
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Stop">Stop</MudButton>
            }
            else if (CurrentProcess.State.IsStopping())
            {
                <SpinnerButton Label="Stopping..." IsDisabled="true" ButtonColor="Color.Secondary" SpinnerColor="Color.Success"/>
            } 
            @if (CurrentProcess.State.CanKill())
            {
                <MudButton Class="ml-2" Variant="Variant.Filled" Color="Color.Error" OnClick="Kill">Kill</MudButton>
            }
            else if (CurrentProcess.State.IsKilling())
            {
                <SpinnerButton Label="Killing..." IsDisabled="true" ButtonColor="Color.Error" SpinnerColor="Color.Error"/>
            }
            @if (CurrentProcess.State.IsStopped())
            {
                <MudButton Class="ml-2" Variant="Variant.Filled" Color="Color.Default" OnClick="Clear">Clear</MudButton>
            }
            <MudSpacer></MudSpacer>
            @if (CurrentProcess.State.IsRunning())
            {
                @if (!ProcessTreeRef.IsVisible)
                {
                    <MudTooltip Text="Show process tree">
                        <MudButton StartIcon="@Icons.Material.Filled.AccountTree"
                                   Variant="Variant.Filled" Color="Color.Secondary" OnClick="ShowProcessTree">Tree</MudButton>
                    </MudTooltip>
                } else if (ProcessTreeRef.IsLoading)
                {
                    <SpinnerButton Label="Tree..."/>
                }

                @if (!RelatedPortsRef.IsVisible)
                {
                    <MudTooltip Text="Scan process tree for all related network ports">
                        <MudButton
                            Class="ml-2"
                            StartIcon="@Icons.Material.Filled.Power"
                            Variant="Variant.Filled" Color="Color.Secondary" OnClick="ShowRelatedPorts">Ports</MudButton>
                    </MudTooltip>
                } else if (RelatedPortsRef.IsLoading)
                {
                    <SpinnerButton Label="Ports..."/>
                }
            }
        </MudCardActions>
    </MudCard>
</EditForm>

<div style="@(DisplayOutputWindow ? "display:block" : "display:none")">
    <OutputWindow Class="mt-5" @ref="OutputWindowRef"/>
</div>

@if (!CurrentProcess.State.IsNotStarted())
{
    <div class="d-flex justify-space-between">
        <div class="mt-3">
            State: @CurrentProcess.State
            @if (CurrentProcess.Statistics.ProcessId > 0)
            {
                <span>, PID @CurrentProcess.Statistics.ProcessId</span>
            }
        </div>
        @if (CurrentProcess.Statistics.ErrorLines > 0)
        {
            <div class="mt-3">
                Errors: @CurrentProcess.Statistics.ErrorLines, @CurrentProcess.Statistics.LastErrorAt.DateTime
            </div>
        }
        else
        {
            <div></div>
        }

        @if (CurrentProcess.Statistics.OutputLines > 0)
        {
            <div class="mt-3">
                StdOut:
                @CurrentProcess.Statistics.OutputLines lines, @CurrentProcess.Statistics.LastOutputAt.DateTime
            </div>
        }
    </div>
    
    <RelatedPorts @ref="RelatedPortsRef"
                  Class="mt-5"
                  ProcessId="CurrentProcess.Statistics.ProcessId"
                  ProcessState="CurrentProcess.State"/>
    
    <ProcessTree @ref="ProcessTreeRef"
                 Class="mt-5"
                 ProcessId="CurrentProcess.Statistics.ProcessId"
                 ProcessState="CurrentProcess.State"/>
}