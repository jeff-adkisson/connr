@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace Connr.App.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="~/"/>
    <link href="css/site.css" rel="stylesheet"/>
    <link href="Connr.App.styles.css" rel="stylesheet"/>
    <link rel="icon" type="image/png" href="images/conure-16x16.png"/>
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered"/>
    
</head>
<body>

@(await Html.RenderComponentAsync<App>(RenderMode.Server))

<div id="blazor-error-ui">
    <environment include="Staging,Production">
        An error has occurred. This application may no longer respond until reloaded.
    </environment>
    <environment include="Development">
        An unhandled exception has occurred. See browser dev tools for details.
    </environment>
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<script>
        function scrollToBottom(elId) {
            let el = document.getElementById(elId).children[0];
            el.scroll({ top: el.scrollHeight, behavior: 'smooth' });
        }
</script>

<script src="_framework/blazor.server.js"></script>
<script src="_content/MudBlazor/MudBlazor.min.js"></script>
<script>
        //https://www.peug.net/en/blazor-manage-disconnects/
        // Wait until a reload button appears
        new MutationObserver((mutations, observer) => {
            if (document.querySelector('#components-reconnect-modal h5 a')) {
                // Now every 10 seconds, see if the server appears to be back, and if so, reload
                async function attemptReload() {
                    await fetch(''); // Check the server really is back
                    location.reload();
                }
                observer.disconnect();
                attemptReload();
                setInterval(attemptReload, 2000);
            }
        }).observe(document.body, { childList: true, subtree: true });
    </script>


</body>
</html>