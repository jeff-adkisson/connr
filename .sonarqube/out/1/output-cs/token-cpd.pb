Í
;/Users/jeff/projects/connr/DotNetstat/DotNetstat/Address.cs
	namespace 	

DotNetstat
 
; 
public 
record 
Address 
{ 
public 

Address 
( 
string 
address !
,! "
Regex# (
?( )
extractPortRegex* :
=; <
null= A
)A B
{ 
address		 
=		 
(		 
address		 
??		 
$str		  
)		  !
.		! "
Trim		" &
(		& '
)		' (
;		( )
if 

( 
string 
. 
IsNullOrWhiteSpace %
(% &
address& -
)- .
||/ 1
extractPortRegex2 B
==C E
nullF J
)J K
{ 	
Name 
= 
address 
; 
return 
; 
} 	
var 
port 
= 
PortNotSpecified #
;# $
var 
matches 
= 
extractPortRegex &
.& '
Matches' .
(. /
address/ 6
)6 7
;7 8
if 

( 
matches 
. 
Count 
== 
$num 
) 
{  !
var 
groups 
= 
matches  
[  !
$num! "
]" #
.# $
Groups$ *
;* +
if 
( 
groups 
[ 
$str  
]  !
.! "
Success" )
)) *
address+ 2
=3 4
groups5 ;
[; <
$str< E
]E F
.F G
ValueG L
;L M
if 
( 
groups 
[ 
$str 
] 
. 
Success &
)& '
int( +
.+ ,
TryParse, 4
(4 5
groups5 ;
[; <
$str< B
]B C
.C D
ValueD I
,I J
outK N
portO S
)S T
;T U
} 	
Port 
= 
port 
; 
Name 
= 
address 
; 
} 
public!! 

static!! 
int!! 
PortNotSpecified!! &
=>!!' )
-!!* +
$num!!+ ,
;!!, -
public## 

int## 
Port## 
{## 
get## 
;## 
}## 
=## 
PortNotSpecified## /
;##/ 0
public%% 

string%% 
Name%% 
{%% 
get%% 
;%% 
init%% "
;%%" #
}%%$ %
=%%& '
$str%%( *
;%%* +
}&& ý
;/Users/jeff/projects/connr/DotNetstat/DotNetstat/Command.cs
	namespace 	

DotNetstat
 
; 
public 
sealed 
class 
Command 
: 
ICommand &
{ 
public 

Command 
( 
CommandModel 
model  %
)% &
{ 
Platform		 
=		 
model		 
.		 
Platform		 !
;		! "
Shell

 
=

 
model

 
.

 
Shell

 
;

 
Name 
= 
model 
. 
Name 
; 
	Arguments 
= 
model 
. 
	Arguments #
;# $
Regex 
= 
new 
CommandRegex  
(  !
model! &
.& '
Parsing' .
). /
;/ 0
} 
public 

Platform 
Platform 
{ 
get "
;" #
init$ (
;( )
}* +
public 

string 
Shell 
{ 
get 
; 
init #
;# $
}% &
public 

string 
Name 
{ 
get 
; 
init "
;" #
}$ %
public 

string 
	Arguments 
{ 
get !
;! "
init# '
;' (
}) *
public 

CommandRegex 
Regex 
{ 
get  #
;# $
init% )
;) *
}+ ,
} ±
@/Users/jeff/projects/connr/DotNetstat/DotNetstat/CommandRegex.cs
	namespace 	

DotNetstat
 
; 
public 
sealed 
class 
CommandRegex  
{ 
public 

CommandRegex 
( 
ParsingModel $
model% *
)* +
{		 
GetProcessesCommand

 
=

 
model

 #
.

# $
GetProcessesCommand

$ 7
;

7 8
var 
netstatParserRegex 
=  
string 
. 
IsNullOrWhiteSpace %
(% &
model& +
.+ ,
NetstatParserRegex, >
)> ?
?@ A
$strB F
:G H
modelI N
.N O
NetstatParserRegexO a
;a b
NetstatParser 
= 
new 
Regex !
(! "
netstatParserRegex" 4
,4 5
RegexOptions6 B
.B C
CompiledC K
)K L
;L M
var 
regexProcessId 
= 
string #
.# $
IsNullOrWhiteSpace$ 6
(6 7
model7 <
.< = 
ProcessIdParserRegex= Q
)Q R
? 
$str 
: 
model 
.  
ProcessIdParserRegex (
;( )
ProcessIdParser 
= 
new 
Regex #
(# $
regexProcessId$ 2
,2 3
RegexOptions4 @
.@ A
CompiledA I
)I J
;J K
var 
regexProcesses 
= 
string #
.# $
IsNullOrWhiteSpace$ 6
(6 7
model7 <
.< =#
GetProcessesParserRegex= T
)T U
? 
$str 
: 
model 
. #
GetProcessesParserRegex +
;+ ,
GetProcessesParser 
= 
new  
Regex! &
(& '
regexProcesses' 5
,5 6
RegexOptions7 C
.C D
CompiledD L
|M N
RegexOptionsO [
.[ \
	Multiline\ e
)e f
;f g$
GetPortFromAddressParser  
=! "
new# &
Regex' ,
(, -
model- 2
.2 3$
ParseAddressAndPortRegex3 K
,K L
RegexOptionsM Y
.Y Z
CompiledZ b
|c d
RegexOptionse q
.q r
	Multiliner {
){ |
;| }
} 
public 

Regex 
NetstatParser 
{  
get! $
;$ %
}& '
public 

Regex 
ProcessIdParser  
{! "
get# &
;& '
}( )
public!! 

bool!! %
IsProcessIdParsingEnabled!! )
=>!!* ,
ProcessIdParser!!- <
.!!< =
ToString!!= E
(!!E F
)!!F G
!=!!H J
$str!!K O
;!!O P
public## 

string## 
GetProcessesCommand## %
{##& '
get##( +
;##+ ,
}##- .
public%% 

Regex%% 
GetProcessesParser%% #
{%%$ %
get%%& )
;%%) *
}%%+ ,
public'' 

Regex'' $
GetPortFromAddressParser'' )
{''* +
get'', /
;''/ 0
}''1 2
}(( ·
</Users/jeff/projects/connr/DotNetstat/DotNetstat/Commands.cs
	namespace 	

DotNetstat
 
; 
public 
static 
class 
Commands 
{ 
private 
static 
ReadOnlyCollection %
<% &
ICommand& .
>. /
?/ 0
ReadOnlyCommands1 A
{B C
getD G
;G H
setI L
;L M
}N O
public

 

static

 
ReadOnlyCollection

 $
<

$ %
ICommand

% -
>

- .
Items

/ 4
=>

5 7
ReadOnlyCommands 
??= 
Loader #
.# $
GetConfiguration$ 4
(4 5
)5 6
;6 7
public 

static 
ICommand 

GetCommand %
(% &
this& *
Platform+ 3
platform4 <
)< =
{ 
if 

( 
platform 
== 
Platform  
.  !
	Automatic! *
)* +
platform 
= 
PlatformDetector '
.' (
Detect( .
(. /
)/ 0
;0 1
var 
command 
= 
Items 
. 
FirstOrDefault *
(* +
c+ ,
=>- /
c0 1
.1 2
Platform2 :
==; =
platform> F
)F G
;G H
if 

( 
command 
== 
null 
) 
throw "
new# &
ArgumentException' 8
(8 9
$"9 ;
$str; Z
{Z [
platform[ c
}c d
$strd e
"e f
)f g
;g h
return 
command 
; 
} 
} Þ
H/Users/jeff/projects/connr/DotNetstat/DotNetstat/Configuration/Loader.cs
	namespace 	

DotNetstat
 
. 
Configuration "
;" #
internal		 
static			 
class		 
Loader		 
{

 
private 
const 
string 
ResourcePath %
=& '
$str( B
;B C
private 
const 
string 
CommandsFile %
=& '
$str( <
;< =
internal 
static 
ReadOnlyCollection &
<& '
ICommand' /
>/ 0
GetConfiguration1 A
(A B
)B C
{ 
var 
commandJson 
= 
Get 
( 
CommandsFile *
)* +
;+ ,
var 
options 
= 
new !
JsonSerializerOptions /
{ 	

Converters 
= 
{ 
new #
JsonStringEnumConverter +
(+ ,
), -
} 
} 	
;	 

var 
config 
= 
JsonSerializer #
.# $
Deserialize$ /
</ 0
ConfigurationModel0 B
>B C
(C D
commandJsonD O
,O P
optionsQ X
)X Y
;Y Z
return 
config 
! 
. 
Commands 
. 
Select 
( 
c 
=> 
new 
Command $
($ %
c% &
)& '
as( *
ICommand+ 3
)3 4
. 
ToList 
( 
) 
.   

AsReadOnly   
(   
)   
;   
}!! 
private)) 
static)) 
string)) 
Get)) 
()) 
string)) $
resourceName))% 1
)))1 2
{** 
var++ 
assembly++ 
=++ 
Assembly++ 
.++   
GetExecutingAssembly++  4
(++4 5
)++5 6
;++6 7
resourceName,, 
=,, 
$",, 
{,, 
ResourcePath,, &
},,& '
$str,,' (
{,,( )
resourceName,,) 5
},,5 6
",,6 7
;,,7 8
using-- 
var-- 
stream-- 
=-- 
assembly-- #
.--# $%
GetManifestResourceStream--$ =
(--= >
resourceName--> J
)--J K
;--K L
using.. 
var.. 
reader.. 
=.. 
new.. 
StreamReader.. +
(..+ ,
stream// 
??// 
throw00 
new00 %
InvalidOperationException00 /
(00/ 0
$"000 2
$str002 <
{00< =
resourceName00= I
}00I J
$str00J U
"00U V
)00V W
)00W X
;00X Y
return11 
reader11 
.11 
	ReadToEnd11 
(11  
)11  !
;11! "
}22 
}33 Ú
</Users/jeff/projects/connr/DotNetstat/DotNetstat/ICommand.cs
	namespace 	

DotNetstat
 
; 
public 
	interface 
ICommand 
{ 
Platform 
Platform 
{ 
get 
; 
} 
string 

Shell 
{ 
get 
; 
} 
string 

Name 
{ 
get 
; 
} 
string 

	Arguments 
{ 
get 
; 
} 
CommandRegex		 
Regex		 
{		 
get		 
;		 
}		 
}

 ë
;/Users/jeff/projects/connr/DotNetstat/DotNetstat/IOutput.cs
	namespace 	

DotNetstat
 
; 
public 
	interface 
IOutput 
{ 
string 

OriginalOutput 
{ 
get 
;  
}! "
IReadOnlyCollection		 
<		 
Line		 
>		 
Lines		 #
{		$ %
get		& )
;		) *
init		+ /
;		/ 0
}		1 2
IReadOnlyCollection 
< 
OriginalLine $
>$ %
UnparsedLines& 3
{4 5
get6 9
;9 :
init; ?
;? @
}A B
ICommand 
Command 
{ 
get 
; 
init  
;  !
}" #
bool 
Success	 
{ 
get 
; 
init 
; 
} 
string 

Error 
{ 
get 
; 
init 
; 
} 
} Ì
8/Users/jeff/projects/connr/DotNetstat/DotNetstat/Line.cs
	namespace 	

DotNetstat
 
; 
public 
sealed 
record 
Line 
: 
OriginalLine (
{ 
public 

Line 
( 
int 
lineNbr 
, 
string #
originalLine$ 0
,0 1
Process2 9
?9 :
process; B
)B C
:D E
baseF J
(J K
lineNbrK R
,R S
originalLineT `
)` a
{		 
Process

 
=

 
process

 
;

 
if 

( 
process 
== 
null 
) 
return #
;# $
try 
{ 	

ModuleName 
= 
process  
.  !

MainModule! +
?+ ,
., -

ModuleName- 7
??8 :
$str; =
;= >
} 	
catch 
( 
	Exception 
) 
{ 	

ModuleName 
= 
$str (
;( )
} 	
} 
public 

static 
int !
ProcessIdNotSpecified +
=>, .
-/ 0
$num0 1
;1 2
public 

string 
Protocol 
{ 
get  
;  !
init" &
;& '
}( )
=* +
$str, 5
;5 6
public 

Address 
LocalAddress 
{  !
get" %
;% &
init' +
;+ ,
}- .
=/ 0
new1 4
(4 5
$str5 >
)> ?
;? @
public!! 

Address!! 
ForeignAddress!! !
{!!" #
get!!$ '
;!!' (
init!!) -
;!!- .
}!!/ 0
=!!1 2
new!!3 6
(!!6 7
$str!!7 @
)!!@ A
;!!A B
public## 

string## 
State## 
{## 
get## 
;## 
init## #
;### $
}##% &
=##' (
$str##) 2
;##2 3
public%% 

int%% 
	ProcessId%% 
{%% 
get%% 
;%% 
init%%  $
;%%$ %
}%%& '
=%%( )!
ProcessIdNotSpecified%%* ?
;%%? @
public'' 

string'' 

ModuleName'' 
{'' 
get'' "
;''" #
init''$ (
;''( )
}''* +
='', -
$str''. 0
;''0 1
public)) 

Process)) 
?)) 
Process)) 
{)) 
get)) !
;))! "
init))# '
;))' (
}))) *
public++ 

override++ 
string++ 
ToString++ #
(++# $
)++$ %
{,, 
return-- 
$".. 
$str.. 
{.. 
Protocol.. 
}.. 
$str.. '
{..' (
LocalAddress..( 4
}..4 5
$str..5 @
{..@ A
ForeignAddress..A O
}..O P
$str..P Y
{..Y Z
State..Z _
}.._ `
$str..` k
{..k l
	ProcessId..l u
}..u v
"..v w
;..w x
}// 
}00 Ê

G/Users/jeff/projects/connr/DotNetstat/DotNetstat/Models/CommandModel.cs
	namespace 	

DotNetstat
 
. 
Models 
; 
public 
class 
CommandModel 
{ 
public 

Platform 
Platform 
{ 
get "
;" #
init$ (
;( )
}* +
=, -
Platform. 6
.6 7
	Automatic7 @
;@ A
public 

string 
Shell 
{ 
get 
; 
init #
;# $
}% &
=' (
$str) +
;+ ,
public		 

string		 
Name		 
{		 
get		 
;		 
init		 "
;		" #
}		$ %
=		& '
$str		( *
;		* +
public 

string 
	Arguments 
{ 
get !
;! "
init# '
;' (
}) *
=+ ,
$str- /
;/ 0
public 

ParsingModel 
Parsing 
{  !
get" %
;% &
init' +
;+ ,
}- .
=/ 0
new1 4
(4 5
)5 6
;6 7
} ­
M/Users/jeff/projects/connr/DotNetstat/DotNetstat/Models/ConfigurationModel.cs
	namespace 	

DotNetstat
 
. 
Models 
; 
public 
class 
ConfigurationModel 
{ 
public 

List 
< 
CommandModel 
> 
Commands &
{' (
get) ,
;, -
init. 2
;2 3
}4 5
=6 7
new8 ;
(; <
)< =
;= >
} Â

G/Users/jeff/projects/connr/DotNetstat/DotNetstat/Models/ParsingModel.cs
	namespace 	

DotNetstat
 
. 
Models 
; 
public 
class 
ParsingModel 
{ 
public 

string 
NetstatParserRegex $
{% &
get' *
;* +
init, 0
;0 1
}2 3
=4 5
$str6 8
;8 9
public 

string  
ProcessIdParserRegex &
{' (
get) ,
;, -
init. 2
;2 3
}4 5
=6 7
$str8 :
;: ;
public		 

string		 
GetProcessesCommand		 %
{		& '
get		( +
;		+ ,
init		- 1
;		1 2
}		3 4
=		5 6
$str		7 9
;		9 :
public 

string #
GetProcessesParserRegex )
{* +
get, /
;/ 0
init1 5
;5 6
}7 8
=9 :
$str; ?
;? @
public 

string $
ParseAddressAndPortRegex *
{+ ,
get- 0
;0 1
init2 6
;6 7
}8 9
=: ;
$str< >
;> ?
} 
;/Users/jeff/projects/connr/DotNetstat/DotNetstat/Netstat.cs
	namespace 	

DotNetstat
 
; 
public 
static 
class 
Netstat 
{ 
public 

static 
IOutput 
Call 
( 
bool #!
includeProcessDetails$ 9
=: ;
true< @
)@ A
{ 
return 
Call 
( 
Platform 
. 
	Automatic &
,& '!
includeProcessDetails( =
)= >
;> ?
} 
public 

static 
IOutput 
Call 
( 
ICommand '
command( /
,/ 0
bool1 5!
includeProcessDetails6 K
=L M
trueN R
)R S
{ 
var 
output 
= 
ExecuteCommand #
(# $
command$ +
)+ ,
;, -
return 
ParserFactory 
. 
Get  
(  !
command! (
.( )
Platform) 1
,1 2!
includeProcessDetails3 H
)H I
.I J
ParseJ O
(O P
outputP V
)V W
;W X
} 
public$$ 

static$$ 
IOutput$$ 
Call$$ 
($$ 
Platform$$ '
platform$$( 0
,$$0 1
bool$$2 6!
includeProcessDetails$$7 L
=$$M N
true$$O S
)$$S T
{%% 
var&& 
output&& 
=&& 
ExecuteCommand&& #
(&&# $
platform&&$ ,
.&&, -

GetCommand&&- 7
(&&7 8
)&&8 9
)&&9 :
;&&: ;
var'' 
parser'' 
='' 
ParserFactory'' "
.''" #
Get''# &
(''& '
platform''' /
,''/ 0!
includeProcessDetails''1 F
)''F G
;''G H
return(( 
parser(( 
.(( 
Parse(( 
((( 
output(( "
)((" #
;((# $
})) 
private++ 
static++ 
string++ 
ExecuteCommand++ (
(++( )
ICommand++) 1
cmd++2 5
)++5 6
{,, 
var-- 
process-- 
=-- 
new-- 
Process-- !
{.. 	
	StartInfo// 
=// 
new// 
ProcessStartInfo// ,
{00 
FileName11 
=11 
cmd11 
.11 
Name11 #
,11# $
	Arguments22 
=22 
cmd22 
.22  
	Arguments22  )
,22) *
UseShellExecute33 
=33  !
false33" '
,33' ("
RedirectStandardOutput44 &
=44' (
true44) -
,44- .
CreateNoWindow55 
=55  
true55! %
}66 
}77 	
;77	 

process88 
.88 
Start88 
(88 
)88 
;88 
var:: 
output:: 
=:: 
process:: 
.:: 
StandardOutput:: +
.::+ ,
	ReadToEnd::, 5
(::5 6
)::6 7
;::7 8
process;; 
.;; 
WaitForExit;; 
(;; 
);; 
;;; 
return<< 
output<< 
;<< 
}== 
}>> À
E/Users/jeff/projects/connr/DotNetstat/DotNetstat/NetstatExtensions.cs
	namespace 	

DotNetstat
 
; 
public 
static 
class 
NetstatExtensions %
{ 
public 

static 
IEnumerable 
< 
Line "
>" #
ByProcessId$ /
(/ 0
this 
IOutput 
netstatOutput "
," #
int 
	processId 
) 
{ 
var 
result 
= 
new 
List 
< 
Line "
>" #
(# $
)$ %
;% &
var 

enumerable 
= 
netstatOutput &
.& '
Lines' ,
., -
ToArray- 4
(4 5
)5 6
;6 7
var 
currentProcess 
= 
	Processes &
.& '
GetProcessById' 5
(5 6
	processId6 ?
)? @
;@ A
if 

( 
currentProcess 
== 
null "
)" #
return$ *
result+ 1
;1 2
var 
processTree 
= 
currentProcess (
.( )
GetTree) 0
(0 1
)1 2
;2 3
var 
allProcesses 
= 
processTree &
.& '
Flatten' .
(. /
)/ 0
;0 1
foreach 
( 
var 
process 
in 
allProcesses  ,
), -
result. 4
.4 5
AddRange5 =
(= >

enumerable> H
.H I
WhereI N
(N O
nO P
=>Q S
nT U
.U V
	ProcessIdV _
==` b
processc j
.j k
Idk m
)m n
)n o
;o p
return 
result 
. 

DistinctBy  
(  !
r! "
=># %
r& '
.' (
LocalAddress( 4
.4 5
Port5 9
)9 :
;: ;
} 
public&& 

static&& 
IEnumerable&& 
<&& 
Line&& "
>&&" #
ByLocalPort&&$ /
(&&/ 0
this'' 
IOutput'' 
netstatOutput'' "
,''" #
int(( 
	localPort(( 
)(( 
{)) 
return** 
netstatOutput** 
.** 
Lines** "
.**" #
Where**# (
(**( )
n**) *
=>**+ -
n**. /
.**/ 0
LocalAddress**0 <
.**< =
Port**= A
==**B D
	localPort**E N
)**N O
.**O P
ToList**P V
(**V W
)**W X
;**X Y
}++ 
public44 

static44 
IEnumerable44 
<44 
Line44 "
>44" #
ByForeignPort44$ 1
(441 2
this55 
IEnumerable55 
<55 
Line55 
>55 
netstatLines55 +
,55+ ,
int66 
foreignPort66 
)66 
{77 
return88 
netstatLines88 
.88 
Where88 !
(88! "
n88" #
=>88$ &
n88' (
.88( )
ForeignAddress88) 7
.887 8
Port888 <
==88= ?
foreignPort88@ K
)88K L
.88L M
ToList88M S
(88S T
)88T U
;88U V
}99 
}:: ¥
O/Users/jeff/projects/connr/DotNetstat/DotNetstat/NetstatParsing/OriginalLine.cs
	namespace 	

DotNetstat
 
. 
NetstatParsing #
;# $
public 
record 
OriginalLine 
{ 
public 

OriginalLine 
( 
int 
lineNbr #
,# $
string% +
originalLine, 8
)8 9
{ 
Number 
= 
lineNbr 
; 
Data 
= 
( 
originalLine 
?? 
$str  "
)" #
.# $
TrimEnd$ +
(+ ,
$char, 0
,0 1
$char2 6
)6 7
;7 8
;		 	
}

 
public 

int 
Number 
{ 
get 
; 
} 
public 

string 
Data 
{ 
get 
; 
} 
} ö

N/Users/jeff/projects/connr/DotNetstat/DotNetstat/NetstatParsing/OutputError.cs
	namespace 	

DotNetstat
 
. 
NetstatParsing #
;# $
public 
class 
OutputError 
: 
Output !
{ 
public 

OutputError 
( 
string 
error #
,# $
ICommand% -
command. 5
,5 6
IReadOnlyCollection7 J
<J K
LineK O
>O P
?P Q
linesR W
=X Y
nullZ ^
,^ _
IReadOnlyCollection 
< 
Line  
>  !
?! "
unparsedLines# 0
=1 2
null3 7
)7 8
: 	
base
 
( 
command 
, 
lines 
??  
new! $
List% )
<) *
Line* .
>. /
(/ 0
)0 1
,1 2
unparsedLines3 @
??A C
newD G
ListH L
<L M
LineM Q
>Q R
(R S
)S T
)T U
{ 
Success		 
=		 
false		 
;		 
Error

 
=

 
error

 
;

 
} 
} Ô;
I/Users/jeff/projects/connr/DotNetstat/DotNetstat/NetstatParsing/Parser.cs
	namespace 	

DotNetstat
 
. 
NetstatParsing #
;# $
internal 
sealed	 
class 
Parser 
{ 
internal 
Parser 
( 
ICommand 
command $
,$ %
bool& *!
includeProcessDetails+ @
)@ A
{ 
Command		 
=		 
command		 
;		 !
IncludeProcessDetails

 
=

 !
includeProcessDetails

  5
;

5 6
} 
private 
ICommand 
Command 
{ 
get "
;" #
}$ %
private 
bool !
IncludeProcessDetails &
{' (
get) ,
;, -
}. /
internal 
IOutput 
Parse 
( 
string !
netstatCmdOutput" 2
)2 3
{ 
var 
parsedLines 
= 
new 
List "
<" #
Line# '
>' (
(( )
)) *
;* +
var 
unparsedLines 
= 
new 
List  $
<$ %
OriginalLine% 1
>1 2
(2 3
)3 4
;4 5
var 
	processes 
= !
IncludeProcessDetails -
?. /
	Processes0 9
.9 :

GetRunning: D
(D E
)E F
:G H
nullI M
;M N
var 
lines 
= 
netstatCmdOutput $
.$ %
Split% *
(* +
$char+ /
)/ 0
;0 1
for 
( 
var 
index 
= 
$num 
; 
index !
<" #
lines$ )
.) *
Length* 0
;0 1
index2 7
++7 9
)9 :
{ 	
var 
line 
= 
lines 
[ 
index "
]" #
;# $
var 
record 
= 
	ParseLine "
(" #
index# (
+) *
$num+ ,
,, -
line. 2
,2 3
Command4 ;
,; <
	processes= F
)F G
;G H
if 
( 
record 
!= 
null 
) 
parsedLines 
. 
Add 
(  
record  &
)& '
;' (
else 
unparsedLines   
.   
Add   !
(  ! "
new  " %
OriginalLine  & 2
(  2 3
index  3 8
+  9 :
$num  ; <
,  < =
line  > B
)  B C
)  C D
;  D E
}!! 	
return## 
new## 
Output## 
(## 
Command## !
,##! "
parsedLines### .
,##. /
unparsedLines##0 =
)##= >
;##> ?
}$$ 
private&& 
static&& 
Line&& 
?&& 
	ParseLine&& "
(&&" #
int'' 

lineNumber'' 
,'' 
string(( 
line(( 
,(( 
ICommand)) 
command)) 
,)) 
IReadOnlyDictionary** 
<** 
int** 
,**  
Process**! (
>**( )
?**) *

dictionary**+ 5
)**5 6
{++ 
var,, 
cmd,, 
=,, 
(,, 
Command,, 
),, 
command,, "
;,," #
var-- 
match-- 
=-- 
cmd-- 
.-- 
Regex-- 
.-- 
NetstatParser-- +
.--+ ,
Match--, 1
(--1 2
line--2 6
)--6 7
;--7 8
if.. 

(.. 
!.. 
match.. 
... 
Success.. 
).. 
return.. "
null..# '
;..' (
if// 

(// 
!// 
int// 
.// 
TryParse// 
(// 
match// 
.//  
Groups//  &
[//& '
$str//' ,
]//, -
.//- .
Value//. 3
,//3 4
out//5 8
var//9 <
	processId//= F
)//F G
)//G H
	processId//I R
=//S T
$num//U V
;//V W
if11 

(11 
	processId11 
==11 
$num11 
&&11 
command11 %
.11% &
Regex11& +
.11+ ,%
IsProcessIdParsingEnabled11, E
)11E F
{22 	
var33 
processIdMatch33 
=33  
cmd33! $
.33$ %
Regex33% *
.33* +
ProcessIdParser33+ :
.33: ;
Match33; @
(33@ A
match33A F
.33F G
Groups33G M
[33M N
$str33N S
]33S T
.33T U
Value33U Z
)33Z [
;33[ \
if44 
(44 
!44 
int44 
.44 
TryParse44 
(44 
processIdMatch44 ,
.44, -
Groups44- 3
[443 4
$str444 9
]449 :
.44: ;
Value44; @
,44@ A
out44B E
	processId44F O
)44O P
)44P Q
	processId44R [
=44\ ]
$num44^ _
;44_ `
}55 	
var77 
process77 
=77 

dictionary77  
!=77! #
null77$ (
&&77) +

dictionary77, 6
.776 7
TryGetValue777 B
(77B C
	processId77C L
,77L M
out77N Q
var77R U
value77V [
)77[ \
?88 
value88 
:99 
null99 
;99 
return;; 
new;; 
Line;; 
(;; 

lineNumber;; "
,;;" #
line;;$ (
,;;( )
process;;* 1
);;1 2
{<< 	
Protocol== 
=== 
match== 
.== 
Groups== #
[==# $
$str==$ +
]==+ ,
.==, -
Value==- 2
,==2 3
LocalAddress>> 
=>> 
new>> 
Address>> &
(>>& '
match>>' ,
.>>, -
Groups>>- 3
[>>3 4
$str>>4 ;
]>>; <
.>>< =
Value>>= B
,>>B C
command>>D K
.>>K L
Regex>>L Q
.>>Q R$
GetPortFromAddressParser>>R j
)>>j k
,>>k l
ForeignAddress?? 
=?? 
new??  
Address??! (
(??( )
match??) .
.??. /
Groups??/ 5
[??5 6
$str??6 ?
]??? @
.??@ A
Value??A F
,??F G
command??H O
.??O P
Regex??P U
.??U V$
GetPortFromAddressParser??V n
)??n o
,??o p
State@@ 
=@@ 
match@@ 
.@@ 
Groups@@  
[@@  !
$str@@! (
]@@( )
.@@) *
Value@@* /
,@@/ 0
	ProcessIdAA 
=AA 
	processIdAA !
}BB 	
;BB	 

}CC 
}DD ©	
P/Users/jeff/projects/connr/DotNetstat/DotNetstat/NetstatParsing/ParserFactory.cs
	namespace 	

DotNetstat
 
. 
NetstatParsing #
;# $
internal 
static	 
class 
ParserFactory #
{ 
internal 
static 
Parser 
Get 
( 
Platform '
platform( 0
,0 1
bool2 6!
includeProcessDetails7 L
)L M
{ 
return 
Get 
( 
platform 
. 

GetCommand &
(& '
)' (
,( )!
includeProcessDetails* ?
)? @
;@ A
} 
private

 
static

 
Parser

 
Get

 
(

 
ICommand

 &
command

' .
,

. /
bool

0 4!
includeProcessDetails

5 J
)

J K
{ 
return 
new 
Parser 
( 
command !
,! "!
includeProcessDetails# 8
)8 9
;9 :
} 
} Á"
:/Users/jeff/projects/connr/DotNetstat/DotNetstat/Output.cs
	namespace 	

DotNetstat
 
; 
public 
class 
Output 
: 
IOutput 
{ 
public 

Output 
( 
ICommand 
command "
," #
IEnumerable$ /
</ 0
Line0 4
>4 5
lines6 ;
,; <
IEnumerable= H
<H I
OriginalLineI U
>U V
unparsedLinesW d
)d e
{		 
Lines

 
=

 
lines

 
.

 
ToList

 
(

 
)

 
.

 

AsReadOnly

 )
(

) *
)

* +
;

+ ,
UnparsedLines 
= 
unparsedLines %
.% &
ToList& ,
(, -
)- .
.. /

AsReadOnly/ 9
(9 :
): ;
;; <
Command 
= 
command 
; 
Success 
= 
true 
; 
} 
public 

Platform 
Platform 
{ 
get "
;" #
init$ (
;( )
}* +
public 

IReadOnlyCollection 
< 
Line #
># $
Lines% *
{+ ,
get- 0
;0 1
init2 6
;6 7
}8 9
public 

IReadOnlyCollection 
< 
OriginalLine +
>+ ,
UnparsedLines- :
{; <
get= @
;@ A
initB F
;F G
}H I
public 

ICommand 
Command 
{ 
get !
;! "
init# '
;' (
}) *
public 

bool 
Success 
{ 
get 
; 
init #
;# $
}% &
public 

string 
Error 
{ 
get 
; 
init #
;# $
}% &
=' (
$str) +
;+ ,
public 

string 
OriginalOutput  
{ 
get 
{ 	
var   
sb   
=   
new   
StringBuilder   &
(  & '
)  ' (
;  ( )
var!! 
allLines!! 
=!! 
Lines!!  
."" 
Concat"" 
("" 
UnparsedLines"" %
)""% &
.## 
OrderBy## 
(## 
x## 
=>## 
x## 
.##  
Number##  &
)##& '
.$$ 
ToList$$ 
($$ 
)$$ 
;$$ 
var&& 
spacing&& 
=&& 
Math&& 
.&& 
Floor&& $
(&&$ %
Math&&% )
.&&) *
Log&&* -
(&&- .
allLines&&. 6
.&&6 7
Count&&7 <
,&&< =
$num&&> @
)&&@ A
)&&A B
+&&C D
$num&&E F
;&&F G
for'' 
('' 
var'' 
i'' 
='' 
$num'' 
;'' 
i'' 
<'' 
allLines''  (
.''( )
Count'') .
(''. /
)''/ 0
;''0 1
i''2 3
++''3 5
)''5 6
{(( 
var)) 
number)) 
=)) 
string)) #
.))# $
Format))$ *
())* +
$"))+ -
$str))- 1
{))1 2
spacing))2 9
}))9 :
$str)): <
"))< =
,))= >
i))? @
+))A B
$num))C D
)))D E
;))E F
sb** 
.** 

AppendLine** 
(** 
$"**  
{**  !
number**! '
}**' (
$str**( +
{**+ ,
allLines**, 4
[**4 5
i**5 6
]**6 7
.**7 8
Data**8 <
}**< =
"**= >
)**> ?
;**? @
}++ 
return-- 
sb-- 
.-- 
ToString-- 
(-- 
)--  
;--  !
}.. 	
}// 
}00 Ï
</Users/jeff/projects/connr/DotNetstat/DotNetstat/Platform.cs
	namespace 	

DotNetstat
 
; 
public 
enum 
Platform 
{ 
	Automatic 
= 
$num 
, 
Windows 
= 
$num 
, 
Linux 	
=
 
$num 
, 
Osx 
= 	
$num
 
}		 º
D/Users/jeff/projects/connr/DotNetstat/DotNetstat/PlatformDetector.cs
	namespace 	

DotNetstat
 
; 
internal 
static	 
class 
PlatformDetector &
{ 
internal 
static 
Platform 
Detect #
(# $
)$ %
{ 
if		 

(		 
	IsWindows		 
(		 
)		 
)		 
return		 
Platform		  (
.		( )
Windows		) 0
;		0 1
if

 

(

 
IsLinux

 
(

 
)

 
)

 
return

 
Platform

 &
.

& '
Linux

' ,
;

, -
if 

( 
IsMacOSx 
( 
) 
) 
return 
Platform '
.' (
Osx( +
;+ ,
return 
Platform 
. 
Windows 
;  
} 
internal 
static 
ICommand 

GetCommand '
(' (
)( )
{ 
return 
Detect 
( 
) 
. 

GetCommand "
(" #
)# $
;$ %
} 
private 
static 
bool 
	IsWindows !
(! "
)" #
{ 
return 
RuntimeInformation !
.! "
IsOSPlatform" .
(. /

OSPlatform/ 9
.9 :
Windows: A
)A B
;B C
} 
private 
static 
bool 
IsMacOSx  
(  !
)! "
{ 
return 
RuntimeInformation !
.! "
IsOSPlatform" .
(. /

OSPlatform/ 9
.9 :
OSX: =
)= >
;> ?
} 
private   
static   
bool   
IsLinux   
(    
)    !
{!! 
return"" 
RuntimeInformation"" !
.""! "
IsOSPlatform""" .
("". /

OSPlatform""/ 9
.""9 :
Linux"": ?
)""? @
;""@ A
}## 
}$$  
=/Users/jeff/projects/connr/DotNetstat/DotNetstat/Processes.cs
	namespace 	

DotNetstat
 
; 
public 
class 
	Processes 
: 
IReadOnlyDictionary ,
<, -
int- 0
,0 1
Process2 9
>9 :
{ 
private 
readonly 

Dictionary 
<  
int  #
,# $
Process% ,
>, -

_processes. 8
;8 9
private

 
	Processes

 
(

 

Dictionary

  
<

  !
int

! $
,

$ %
Process

& -
>

- .
	processes

/ 8
)

8 9
{ 

_processes 
= 
	processes 
; 
} 
public 

IEnumerator 
< 
KeyValuePair #
<# $
int$ '
,' (
Process) 0
>0 1
>1 2
GetEnumerator3 @
(@ A
)A B
{ 
return 

_processes 
. 
GetEnumerator '
(' (
)( )
;) *
} 
IEnumerator 
IEnumerable 
. 
GetEnumerator )
() *
)* +
{ 
return 
GetEnumerator 
( 
) 
; 
} 
public 

int 
Count 
=> 

_processes "
." #
Count# (
;( )
public 

bool 
ContainsKey 
( 
int 
key  #
)# $
{ 
return 

_processes 
. 
ContainsKey %
(% &
key& )
)) *
;* +
} 
public   

bool   
TryGetValue   
(   
int   
key    #
,  # $
out  % (
Process  ) 0
value  1 6
)  6 7
{!! 
return"" 

_processes"" 
."" 
TryGetValue"" %
(""% &
key""& )
,"") *
out""+ .
value""/ 4
!""4 5
)""5 6
;""6 7
}## 
public%% 

Process%% 
this%% 
[%% 
int%% 
key%% 
]%%  
=>%%! #

_processes%%$ .
[%%. /
key%%/ 2
]%%2 3
;%%3 4
public'' 

IEnumerable'' 
<'' 
int'' 
>'' 
Keys''  
=>''! #

_processes''$ .
.''. /
Keys''/ 3
;''3 4
public)) 

IEnumerable)) 
<)) 
Process)) 
>)) 
Values))  &
=>))' )

_processes))* 4
.))4 5
Values))5 ;
;)); <
public11 

static11 
	Processes11 

GetRunning11 &
(11& '
)11' (
{22 
return33 
new33 
	Processes33 
(33 
Process33 $
.44 
GetProcesses44 
(44 
)44 
.55 
ToDictionary55 
(55 
key55 
=>55  
key55! $
.55$ %
Id55% '
,55' (
val55) ,
=>55- /
val550 3
)553 4
)554 5
;555 6
}66 
public== 

static== 
Process== 
?== 
GetProcessById== )
(==) *
int==* -
	processId==. 7
)==7 8
{>> 
try?? 
{@@ 	
returnAA 
ProcessAA 
.AA 
GetProcessByIdAA )
(AA) *
	processIdAA* 3
)AA3 4
;AA4 5
}BB 	
catchCC 
(CC 
	ExceptionCC 
)CC 
{DD 	
returnEE 
nullEE 
;EE 
}FF 	
}GG 
}HH Æ
\/Users/jeff/projects/connr/DotNetstat/DotNetstat/ProcessTree/FlattenProcessTreeExtensions.cs
	namespace 	

DotNetstat
 
. 
ProcessTree  
;  !
public 
static 
class (
FlattenProcessTreeExtensions 0
{ 
public 

static 
IEnumerable 
< 
Process %
>% &
Flatten' .
(. /
this/ 3
Tree4 8
processTree9 D
)D E
{ 
var		 
	processes		 
=		 
new		 
List		  
<		  !
Process		! (
>		( )
(		) *
)		* +
;		+ ,
processTree

 
.

 
Flatten

 
(

 
	processes

 %
)

% &
;

& '
return 
	processes 
; 
} 
private 
static 
void 
Flatten 
(  
this  $
Tree% )
processTree* 5
,5 6
ICollection7 B
<B C
ProcessC J
>J K
	processesL U
)U V
{ 
	processes 
. 
Add 
( 
processTree !
.! "
Process" )
)) *
;* +
foreach 
( 
var 
childProcess !
in" $
processTree% 0
.0 1
ChildProcesses1 ?
)? @
childProcess 
. 
Flatten  
(  !
	processes! *
)* +
;+ ,
} 
} <
M/Users/jeff/projects/connr/DotNetstat/DotNetstat/ProcessTree/GetExtensions.cs
	namespace 	

DotNetstat
 
. 
ProcessTree  
;  !
public		 
static		 
partial		 
class		 
GetExtensions		 )
{

 
public 

static 
Tree 
GetTree 
( 
this #
Process$ +
parentProcess, 9
)9 :
{ 
return 
new 
Tree 
( 
parentProcess %
,% &
	Processes' 0
.0 1

GetRunning1 ;
(; <
)< =
)= >
;> ?
} 
public 

static 
List 
< 
Process 
> 
GetChildProcesses  1
(1 2
this2 6
Process7 >
process? F
)F G
{ 
return 
process 
. 
GetChildProcesses (
(( )
	Processes) 2
.2 3

GetRunning3 =
(= >
)> ?
)? @
;@ A
} 
internal 
static 
List 
< 
Process  
>  !
GetChildProcesses" 3
(3 4
this4 8
Process9 @
processA H
,H I
	ProcessesJ S
	processesT ]
)] ^
{ 
return 
OperatingSystem 
. 
	IsWindows (
(( )
)) *
? 
process 
. &
GetChildProcessesOnWindows 0
(0 1
	processes1 :
): ;
: 
process 
. &
GetChildProcessesFromShell 0
(0 1
	processes1 :
): ;
;; <
} 
[$$ 
SupportedOSPlatform$$ 
($$ 
$str$$ "
)$$" #
]$$# $
private%% 
static%% 
List%% 
<%% 
Process%% 
>%%  &
GetChildProcessesOnWindows%%! ;
(%%; <
this%%< @
Process%%A H
process%%I P
,%%P Q
	Processes%%R [
	processes%%\ e
)%%e f
{&& 
var'' 
results'' 
='' 
new'' 
List'' 
<'' 
Process'' &
>''& '
(''' (
)''( )
;'') *
if)) 

()) 
!)) 
OperatingSystem)) 
.)) 
	IsWindows)) &
())& '
)))' (
)))( )
return))* 0
results))1 8
;))8 9
var++ 
	queryText++ 
=++ 
$"++ 
$str++ V
{++V W
process++W ^
.++^ _
Id++_ a
}++a b
"++b c
;++c d
using,, 
var,, 
searcher,, 
=,, 
new,,  $
ManagementObjectSearcher,,! 9
(,,9 :
	queryText,,: C
),,C D
;,,D E
foreach-- 
(-- 
var-- 
obj-- 
in-- 
searcher-- $
.--$ %
Get--% (
(--( )
)--) *
)--* +
{.. 	
var// 
data// 
=// 
obj// 
.// 

Properties// %
[//% &
$str//& 1
]//1 2
.//2 3
Value//3 8
;//8 9
var00 
childId00 
=00 
Convert00 !
.00! "
ToInt3200" )
(00) *
data00* .
)00. /
;00/ 0
var22 
childProcess22 
=22 
	processes22 (
.22( )
ContainsKey22) 4
(224 5
childId225 <
)22< =
?22> ?
	processes22@ I
[22I J
childId22J Q
]22Q R
:22S T
null22U Y
;22Y Z
if33 
(33 
childProcess33 
!=33 
null33  $
)33$ %
results33& -
.33- .
Add33. 1
(331 2
childProcess332 >
)33> ?
;33? @
}44 	
return66 
results66 
;66 
}77 
[?? 
SupportedOSPlatform?? 
(?? 
$str??  
)??  !
]??! "
[@@ 
SupportedOSPlatform@@ 
(@@ 
$str@@ 
)@@ 
]@@  
privateAA 
staticAA 
ListAA 
<AA 
ProcessAA 
>AA  &
GetChildProcessesFromShellAA! ;
(AA; <
thisAA< @
ProcessAAA H
processAAI P
,AAP Q
	ProcessesAAR [
	processesAA\ e
)AAe f
{BB 
varCC 
resultsCC 
=CC 
newCC 
ListCC 
<CC 
ProcessCC &
>CC& '
(CC' (
)CC( )
;CC) *
varEE 
cmdEE 
=EE 
PlatformDetectorEE "
.EE" #

GetCommandEE# -
(EE- .
)EE. /
;EE/ 0
varFF 
psOutputFF 
=FF 
ExecuteFF 
.FF 
CommandFF &
(FF& '
cmdFF' *
.FF* +
ShellFF+ 0
,FF0 1
cmdFF2 5
.FF5 6
RegexFF6 ;
.FF; <
GetProcessesCommandFF< O
)FFO P
;FFP Q
varGG 
matchesGG 
=GG 
cmdGG 
.GG 
RegexGG 
.GG  
GetProcessesParserGG  2
.GG2 3
MatchesGG3 :
(GG: ;
psOutputGG; C
)GGC D
;GGD E
foreachII 
(II 
MatchII 
matchII 
inII 
matchesII  '
)II' (
{JJ 	
varKK 
pidKK 
=KK 
intKK 
.KK 
ParseKK 
(KK  
matchKK  %
.KK% &
GroupsKK& ,
[KK, -
$strKK- 2
]KK2 3
.KK3 4
ValueKK4 9
)KK9 :
;KK: ;
varLL 
ppidLL 
=LL 
intLL 
.LL 
ParseLL  
(LL  !
matchLL! &
.LL& '
GroupsLL' -
[LL- .
$strLL. 4
]LL4 5
.LL5 6
ValueLL6 ;
)LL; <
;LL< =
ifMM 
(MM 
ppidMM 
!=MM 
processMM 
.MM  
IdMM  "
)MM" #
continueMM$ ,
;MM, -
varOO 
childProcessOO 
=OO 
	processesOO (
.OO( )
ContainsKeyOO) 4
(OO4 5
pidOO5 8
)OO8 9
?OO: ;
	processesOO< E
[OOE F
pidOOF I
]OOI J
:OOK L
nullOOM Q
;OOQ R
ifPP 
(PP 
childProcessPP 
!=PP 
nullPP  $
)PP$ %
resultsPP& -
.PP- .
AddPP. 1
(PP1 2
childProcessPP2 >
)PP> ?
;PP? @
}QQ 	
returnSS 
resultsSS 
;SS 
}TT 
[VV 
GeneratedRegexVV 
(VV 
$strVV G
,VVG H
RegexOptionsVVI U
.VVU V
	MultilineVVV _
)VV_ `
]VV` a
privateWW 
staticWW 
partialWW 
RegexWW  %
LinuxPsCommandParserRegexWW! :
(WW: ;
)WW; <
;WW< =
}XX  
D/Users/jeff/projects/connr/DotNetstat/DotNetstat/ProcessTree/Tree.cs
	namespace 	

DotNetstat
 
. 
ProcessTree  
;  !
public 
sealed 
class 
Tree 
{		 
internal

 
Tree

 
(

 
Process

 
process

 !
,

! "
	Processes

# ,
	processes

- 6
,

6 7
int

8 ;
depth

< A
=

B C
$num

D E
)

E F
{ 
Process 
= 
process 
; 
ChildProcesses 
= 
new 
List !
<! "
Tree" &
>& '
(' (
)( )
;) *
var 
childProcesses 
= 
Process $
.$ %
GetChildProcesses% 6
(6 7
	processes7 @
)@ A
;A B
depth 
++ 
; 
if 

( 
depth 
> 
$num 
) 
return 
; 
foreach 
( 
var 
childProcess !
in" $
childProcesses% 3
)3 4
ChildProcesses 
. 
Add 
( 
new "
Tree# '
(' (
childProcess( 4
,4 5
	processes6 ?
,? @
depthA F
)F G
)G H
;H I
} 
public 

Process 
Process 
{ 
get  
;  !
}" #
public 

List 
< 
Tree 
> 
ChildProcesses $
{% &
get' *
;* +
}, -
public 

int 
Id 
=> 
Process 
. 
Id 
;  
public 

string 
ProcessName 
=>  
Process! (
.( )
ProcessName) 4
;4 5
public   

long   
Memory   
=>   
Process   !
.  ! "
PrivateMemorySize64  " 5
;  5 6
}!! ¸
A/Users/jeff/projects/connr/DotNetstat/DotNetstat/Shell/Execute.cs
	namespace 	

DotNetstat
 
. 
Shell 
; 
internal 
static	 
class 
Execute 
{ 
internal 
static 
string 
Command "
(" #
string# )
shell* /
,/ 0
string1 7
command8 ?
,? @
stringA G
?G H
	argumentsI R
=S T
nullU Y
)Y Z
{ 
	arguments		 
=		 
	arguments		 
??		  
string		! '
.		' (
Empty		( -
;		- .
var

 
cmd

 
=

 
$"

 
{

 
command

 
}

 
$str

 
{

 
	arguments

 (
}

( )
"

) *
;

* +
var 
escapedArgs 
= 
cmd 
. 
Replace %
(% &
$str& *
,* +
$str, 2
)2 3
;3 4
var 
process 
= 
new 
Process !
{ 	
	StartInfo 
= 
new 
ProcessStartInfo ,
{ 
FileName 
= 
shell  
,  !
	Arguments 
= 
$" 
$str #
{# $
escapedArgs$ /
}/ 0
$str0 2
"2 3
,3 4"
RedirectStandardOutput &
=' (
true) -
,- .
UseShellExecute 
=  !
false" '
,' (
CreateNoWindow 
=  
true! %
} 
} 	
;	 

process 
. 
Start 
( 
) 
; 
var 
result 
= 
process 
. 
StandardOutput +
.+ ,
	ReadToEnd, 5
(5 6
)6 7
;7 8
process 
. 
WaitForExit 
( 
) 
; 
return 
result 
; 
} 
} 